// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: currencyrates.proto

/*
Package currencyrates is a generated protocol buffer package.

It is generated from these files:
	currencyrates.proto

It has these top-level messages:
	GetRateRequest
	GetCentralBankRateRequest
	RateData
	EmptyResponse
	CorrectionCorridor
*/
package currencyrates

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CurrencyratesService service

type CurrencyratesService interface {
	GetOxrRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error)
	GetPaysuperRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error)
	GetCentralBankRateForDate(ctx context.Context, in *GetCentralBankRateRequest, opts ...client.CallOption) (*RateData, error)
	GetStockRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error)
	GetCardpayRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error)
	SetPaysuperCorrectionCorridor(ctx context.Context, in *CorrectionCorridor, opts ...client.CallOption) (*EmptyResponse, error)
}

type currencyratesService struct {
	c    client.Client
	name string
}

func NewCurrencyratesService(name string, c client.Client) CurrencyratesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "currencyrates"
	}
	return &currencyratesService{
		c:    c,
		name: name,
	}
}

func (c *currencyratesService) GetOxrRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyratesService.GetOxrRate", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyratesService) GetPaysuperRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyratesService.GetPaysuperRate", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyratesService) GetCentralBankRateForDate(ctx context.Context, in *GetCentralBankRateRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyratesService.GetCentralBankRateForDate", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyratesService) GetStockRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyratesService.GetStockRate", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyratesService) GetCardpayRate(ctx context.Context, in *GetRateRequest, opts ...client.CallOption) (*RateData, error) {
	req := c.c.NewRequest(c.name, "CurrencyratesService.GetCardpayRate", in)
	out := new(RateData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyratesService) SetPaysuperCorrectionCorridor(ctx context.Context, in *CorrectionCorridor, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "CurrencyratesService.SetPaysuperCorrectionCorridor", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrencyratesService service

type CurrencyratesServiceHandler interface {
	GetOxrRate(context.Context, *GetRateRequest, *RateData) error
	GetPaysuperRate(context.Context, *GetRateRequest, *RateData) error
	GetCentralBankRateForDate(context.Context, *GetCentralBankRateRequest, *RateData) error
	GetStockRate(context.Context, *GetRateRequest, *RateData) error
	GetCardpayRate(context.Context, *GetRateRequest, *RateData) error
	SetPaysuperCorrectionCorridor(context.Context, *CorrectionCorridor, *EmptyResponse) error
}

func RegisterCurrencyratesServiceHandler(s server.Server, hdlr CurrencyratesServiceHandler, opts ...server.HandlerOption) error {
	type currencyratesService interface {
		GetOxrRate(ctx context.Context, in *GetRateRequest, out *RateData) error
		GetPaysuperRate(ctx context.Context, in *GetRateRequest, out *RateData) error
		GetCentralBankRateForDate(ctx context.Context, in *GetCentralBankRateRequest, out *RateData) error
		GetStockRate(ctx context.Context, in *GetRateRequest, out *RateData) error
		GetCardpayRate(ctx context.Context, in *GetRateRequest, out *RateData) error
		SetPaysuperCorrectionCorridor(ctx context.Context, in *CorrectionCorridor, out *EmptyResponse) error
	}
	type CurrencyratesService struct {
		currencyratesService
	}
	h := &currencyratesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CurrencyratesService{h}, opts...))
}

type currencyratesServiceHandler struct {
	CurrencyratesServiceHandler
}

func (h *currencyratesServiceHandler) GetOxrRate(ctx context.Context, in *GetRateRequest, out *RateData) error {
	return h.CurrencyratesServiceHandler.GetOxrRate(ctx, in, out)
}

func (h *currencyratesServiceHandler) GetPaysuperRate(ctx context.Context, in *GetRateRequest, out *RateData) error {
	return h.CurrencyratesServiceHandler.GetPaysuperRate(ctx, in, out)
}

func (h *currencyratesServiceHandler) GetCentralBankRateForDate(ctx context.Context, in *GetCentralBankRateRequest, out *RateData) error {
	return h.CurrencyratesServiceHandler.GetCentralBankRateForDate(ctx, in, out)
}

func (h *currencyratesServiceHandler) GetStockRate(ctx context.Context, in *GetRateRequest, out *RateData) error {
	return h.CurrencyratesServiceHandler.GetStockRate(ctx, in, out)
}

func (h *currencyratesServiceHandler) GetCardpayRate(ctx context.Context, in *GetRateRequest, out *RateData) error {
	return h.CurrencyratesServiceHandler.GetCardpayRate(ctx, in, out)
}

func (h *currencyratesServiceHandler) SetPaysuperCorrectionCorridor(ctx context.Context, in *CorrectionCorridor, out *EmptyResponse) error {
	return h.CurrencyratesServiceHandler.SetPaysuperCorrectionCorridor(ctx, in, out)
}
